---
title: "Stat 541 Final Portfolio"
format: pdf
editor: visual
author: Ashley Ibarra
self-contained: true
toc: true
---

```{r}
#| include: false
#| label: packages-portfolio-objectives

library(tidyverse)

portfolio_levels <- tibble(
  Objective = character(), 
  Level = numeric() 
  )
```

# Independent Learning (IL):

*These objectives show your ability to seek out new information and adapt to new tools to solve data analysis problems.*

------------------------------------------------------------------------

## \[IL-1\] Adding new skills:

-   I can find and adopt new packages to accomplish tasks.
-   I can adapt to different syntax styles (tidy, base, formula style, data.table).
-   I can use tutorials, etc. to enhance my understanding of new concepts

```{r}
#| include: false
#| label: IL-1

## Fill in the line below with your self-assigned level for this objective.
## Remember, you have the following levels to choose from:

# 1 = novice
# 2 = proficiency
# 3 = mastery 
# 4 = expert

my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "IL-1",
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

-   I can find and adopt new packages to accomplish tasks.
    -   Commit: <https://github.com/Cal-Poly-Advanced-R/lab-2-visualization-rebeccaioffe/pull/9/commits/a0a398bdfac9178e34ad08a34ce765a151b08a02>
    -   In this commit, I used the Leaflet map package and learned how to add custom map backgrounds using addProviderTiles function. There are many different map backgrounds one can choose with this function.
-   I can use tutorials, etc. to enhance my understanding of new concepts
    -   Online Tutorial Used: <https://rstudio.github.io/leaflet/articles/markers.html#awesome-icons>
        -   Commit: <https://github.com/Cal-Poly-Advanced-R/lab-2-visualization-rebeccaioffe/pull/9/commits/a0a398bdfac9178e34ad08a34ce765a151b08a02>
        -   In this commit, I also used a online source to learn how to add custom markers to a leaflet map. I learned that using the awesomeIcons function, you could create custom icons colors and I used it to separate the two different groups in the data for the map. Using the addAwesomeMarkers function, I was able to implement this custom icon.
-   I can adapt to different syntax styles (tidy, base, formula style, data.table).
    -   STILL NEEDED

------------------------------------------------------------------------

## \[IL-2\] Online resources:

-   I can use online resources (Google, ChatGPT, StackOverflow) to solve problems, debug, or find new tools.
-   I can find source code for similar projects to use as starting points for my own
-   I can read the documentation of an API to figure out how to access data.

```{r}
#| include: false
#| label: IL-2

## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "IL-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

-   I can use online resources (Google, ChatGPT, StackOverflow) to solve problems, debug, or find new tools.
    -   chatgpt convo: <https://chat.openai.com/share/c32ad349-88ef-47e6-aadf-b52307033910>
    -   In this chatgpt convo, I wanted to debunk an error I was having with running the API data. I was able to figure out that my dataframe that stored the longitude data was not updating and saving the code that removed the whitespace present in the data to my dataframe. So the for loop that ran the API data could not run properly. The code chatgpt provided code to print the url of the api data and from there I was about to see that the longitude column had problems.

------------------------------------------------------------------------

# Reproducible Workflow (RW):

*These objectives show your ability to produce artifacts and deliverables that are organized, documented, version tracked, and responsibly designed.* \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

## \[RW-1\] File, code, and data management:

-   I can use Git and GitHub to track my progress and collaborate (creating repos, cloning, forking, pull requesting).
-   I always use R Projects and the {here} package to organize my scripts, notebooks, data, and applications.

```{r}
#| include: false
#| label: RW-1

my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "RW-1",
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

-   I can use Git and GitHub to track my progress and collaborate (creating repos, cloning, forking, pull requesting).
    -   Commit:<https://github.com/Cal-Poly-Advanced-R/lab-1-review-aibarra21/pull/17>

        Link: <https://github.com/Cal-Poly-Advanced-R/lab-1-review-aibarra21/graphs/contributors>

    -   The commit shows an example of a pull request I made to update a small part of the lab. The other link shows a frequency of commits I made for this lab to track my progress.

```{=html}
<!-- -->
```
-   I always use R Projects and the {here} package to organize my scripts, notebooks, data, and applications.
    -   commit: <https://github.com/aibarra21/portfolio1-STAT541/pull/1/commits/7d59c0feca8832cca20c3d1e7989c617dfc12e91>

        <https://github.com/aibarra21/portfolio1-STAT541/pull/1/commits/e0c462ead7555f201015e40eb1182b62e05c64bd>

    -   In these commits, I created a git repository to store my portfolio code and used the here() function to call in data into the quarto doc.

------------------------------------------------------------------------

## \[RW-2\] Notebooks:

-   I can use Quarto and/or R Markdown to produce a reproducible notebook and polished rendered document.
-   I can use appropriate chunk options (echo, error, cache, etc.) to render my qmd/Rmd quickly and cleanly.

```{r, include = FALSE}
#| include: false
#| label: RW-2

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "RW-2",
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

## \[RW-3\] Code style

-   My code is clear, readable, well-organized, and well-commented.
-   I can use a package-based workflow to organize my analyses

```{r}
#| include: false
#| label: RW-3

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "RW-3",
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

# Technical Communication (TC):

*These objectives show your ability to communicate the processes you have implemented in your code, as well as the data conclusions and results.*

------------------------------------------------------------------------

## \[TC-1\] Project summaries:

-   I can clearly and succinctly summarize the contributions of my project.
-   I accurately interpret statistical or modeling results.
-   I consider the appropriate scope and impact of my project results.

```{r}
#| include: false
#| label: TC-1

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "TC-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

## \[TC-2\] Documentation:

-   I provide ample documentation and tutorials for my custom functions.
-   I provide user-friendly guides for my tools and software

```{r}
#| include: false
#| label: TC-2

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "TC-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

# Data Manipulation (DM):

*These objectives relate to the collection, cleaning, processing, and preparing of datasets for analysis.*

------------------------------------------------------------------------

## \[DM-1\] Data preparation:

-   I can read in datasets to R, including untidy ones.
-   I can clean datasets to deal with missing data, typos, poor formatting, etc.

```{r, include = FALSE}
#| include: false
#| label: DM-1

my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "DM-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

## \[DM-2\] Data wrangling

-   I can cleverly use pivoting, grouping, and joining to wrangle data.
-   I can use mapping ({purrr}), applying (tapply, lapply, ...), and/or iteration (for loops) to perform repeated tasks.

```{r, include = FALSE}
#| include: false
#| label: DM-2

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "DM-2",
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

## \[DM-3\] Data formats

-   I can use API urls to access JSON data and convert it to a data frame

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 0

portfolio_levels <- portfolio_levels %>%
  bind_rows(tibble(Objective = "DM-3", 
                   Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

# Professional Visualization (PV):

------------------------------------------------------------------------

## \[PV-1\] ggplot: grammar of graphics

-   I can use less common geometries, including those from ggplot extension packages.
-   I can use the correct aesthetics to map variables
-   I understand how geometries inherit aesthetics I can add annotations to my plot

```{r}
#| include: false
#| label: PV-1

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "PV-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

## \[PV-2\] ggplot: theme

-   I can edit the titles, subtitles, captions, axis labels, etc. to create a clearly labelled plot
-   I can choose colors ("scales") and themes to make a visually pleasing and accessible plot

```{r}
#| include: false
#| label: PV-2

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "PV-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

## \[PV-3\] Dynamic visualizations

-   I can use a package like {gganimate} to create self-contained gifs
-   I can use a package like {plotly}, {ggplotly}, {leaflet}, {ggirafe}, etc. to make interactive html widgets

```{r}
#| include: false
#| label: PV-3

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "PV-3", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

## \[PV-4\] Shiny

-   I can create a functional Shiny app.
-   I understand the principle of reactivity, and how to use it.

```{r}
#| include: false
#| label: PV-4

my_level <- 2

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "PV-4", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

-   I can create a functional Shiny app.
    -   Commit:<https://github.com/SPLeader/STAT-541-P1/pull/5/commits/fb643bce0356818e61fc90c762512ff7f2e3cd4e>
    -   For this project, I created two shiny app plots that give information about body camera data based on picking year and race and another plot that shows the fatal shootings by race and state. These plots were basic line plots and a basic bar chart. I used chatgpt to help create the plots. From the chatgpt code, i was able to understand how the reactive objects change each time I changed as aspect of the plot.
    -   link to chatgpt convo: <https://chat.openai.com/share/0bae8888-058c-48f6-9391-a7b13624eb71>

------------------------------------------------------------------------

# Algorithms and Iteration (AI):

*These objectives ask you to design code-based approaches to statistical computing problems, usually involving iteration to a stopping condition.*

------------------------------------------------------------------------

## \[AI-1\] Creating an algorithm:

-   I can invent and implement my own iterative algorithm.

```{r}
#| include: false
#| label: AI-1

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "AI-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

# Code Design (CD):

*These objectives relate to making wise or clever choices in how you implement a procedure in code; including creating functions and objects, or thinking about the clarity and efficiency of processes.*

------------------------------------------------------------------------

## \[CD-1\] Speed and Efficiency:

-   I can recognize moments of possible slowdown in my code, and use built-in functions or parallelizing to speed them up.
-   I always use and design vectorized functions whenever possible.

```{r}
#| include: false
#| label: CD-1

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "CD-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

## \[CD-2\] Object handling:

-   I can make reasonable choices in my code design about when to save intermediate objects.
-   I can convert objects between types and structures as needed.

```{r}
#| include: false
#| label: CD-2

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "CD-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

## \[CD-3\] Supporting functions:

-   I write helper/shortcut functions to streamline repeated tasks and make my code easier to read.
-   I use intermediate functions to streamline repeated or looping processes.

```{r}
#| include: false
#| label: CD-3

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "CD-3", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

# Summary

```{r}
#| echo: false
#| label: summary-graph

portfolio_levels %>%
  mutate(
    Category = str_extract(Objective, "[A-Z]{2}"),
    Level = factor(Level)
  ) %>%
  ggplot(
    aes(x = Level, 
        y = (..count..)/sum(..count..)
        )
    ) +
  geom_bar() +
  labs(x = "Level",
       y = "Percent") +
  theme_bw() +
  scale_y_continuous(labels = scales::percent)
```

## Grade

Based on the summary plot above, I believe I have earned a \_\_\_ in STAT 541.

### Justification
